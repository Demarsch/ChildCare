<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mvvm="clr-namespace:Core.Wpf.Mvvm"
                    xmlns:converters="clr-namespace:Core.Wpf.Converters"
                    xmlns:misc="clr-namespace:Core.Wpf.Misc"
                    xmlns:gif="http://wpfanimatedgif.codeplex.com">
    <Duration x:Key="AnimationDuration">0:0:1</Duration>
    <!--Default styles-->
    <Style x:Key="TextHighlightStyle"
           TargetType="{x:Type Run}">
        <Setter Property="Background"
                Value="SteelBlue" />
        <Setter Property="Foreground"
                Value="White" />
    </Style>
    <!--Control templates-->
    <!--Validtion template-->
    <ControlTemplate x:Key="ValidationTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <AdornedElementPlaceholder Grid.Column="0" 
                                       x:Name="placeholder" />
            <Image Grid.Column="1" 
                   VerticalAlignment="Center" 
                   HorizontalAlignment="Right" 
                   Width="16" 
                   Height="16" 
                   Source="pack://application:,,,/Core;Component/Resources/Images/Error16x16.png"
                   ToolTip="{Binding ElementName=placeholder, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
                   Margin="5 0 0 0" 
                   x:Name="image">
                <Image.Triggers>
                    <EventTrigger RoutedEvent="Control.Loaded">
                        <BeginStoryboard>
                            <Storyboard TargetName="image" 
                                        TargetProperty="Opacity">
                                <DoubleAnimation From="0"
                                                 To="1" 
                                                 Duration="0:0:0.4" />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </Image.Triggers>
            </Image>
        </Grid>
    </ControlTemplate>
    <!--Validation template where icon is placed on top of the validated control-->
    <ControlTemplate x:Key="ValidationTemplateRightIcon">
        <Grid>
           <AdornedElementPlaceholder Grid.Column="0" 
                                       x:Name="placeholder" />
            <Image VerticalAlignment="Center" 
                   HorizontalAlignment="Right" 
                   Width="16" 
                   Height="16" 
                   Source="pack://application:,,,/Core;Component/Resources/Images/Error16x16.png"
                   ToolTip="{Binding ElementName=placeholder, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
                   Margin="0 0 5 0"
                   x:Name="image">
                <Image.Triggers>
                    <EventTrigger RoutedEvent="Control.Loaded">
                        <BeginStoryboard>
                            <Storyboard TargetName="image" 
                                        TargetProperty="Opacity">
                                <DoubleAnimation From="0"
                                                 To="1" 
                                                 Duration="0:0:0.4" />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </Image.Triggers>
            </Image>
        </Grid>
    </ControlTemplate>
    <!--Close button-->
    <ControlTemplate x:Key="CloseButtonTemplate"
                     TargetType="{x:Type Button}">
        <Border BorderBrush="Transparent"
                BorderThickness="1"
                Name="border">
            <Path Data="M 0,0 l 12,12 m -12,0 l 12,-12"
                  Stroke="Black"
                  StrokeThickness="2"
                  Margin="4"
                  Name="cross"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter TargetName="border"
                        Property="BorderBrush"
                        Value="DimGray" />
                <Setter TargetName="border"
                        Property="Background"
                        Value="LightGray" />
                <Setter TargetName="cross"
                        Property="Stroke"
                        Value="DimGray" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--Data templates-->
    <!--Busy Mediator-->
    <DataTemplate DataType="{x:Type mvvm:BusyMediator}">
        <Border HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                IsHitTestVisible="{Binding IsActive}"
                x:Name="outerBorder"
                Background="Transparent">
            <Border BorderBrush="Black"
                    BorderThickness="1"
                    Background="White"
                    x:Name="innerBorder"
                    Opacity="0"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center">
                <StackPanel Orientation="Horizontal"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center">
                    <Image Width="32"
                           Height="32"
                           Stretch="None"
                           gif:ImageBehavior.AnimatedSource="../Resources/Images/Loading-32x32.GIF"
                           VerticalAlignment="Center"
                           Margin="5" />
                    <TextBlock Text="{Binding Message}"
                               VerticalAlignment="Center"
                               Margin="5" />
                </StackPanel>
            </Border>
        </Border>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsActive}"
                         Value="True">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard TargetName="innerBorder"
                                    TargetProperty="Opacity">
                            <DoubleAnimation To="1"
                                             Duration="{StaticResource AnimationDuration}" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard TargetName="innerBorder"
                                    TargetProperty="Opacity">
                            <DoubleAnimation To="0"
                                             From="1"
                                             Duration="{StaticResource AnimationDuration}" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <!--CriticalFailureMediator-->
    <DataTemplate DataType="{x:Type mvvm:FailureMediator}">
        <DataTemplate.Resources>
            <converters:Converter x:Key="IsExpandedToTextConverter">
                <converters:ConverterItem From="{x:Static misc:StaticBoolean.True}"
                                          To="Скрыть детали" />
                <converters:ConverterItem From="{x:Static misc:StaticBoolean.False}"
                                          To="Показать детали" />
            </converters:Converter>
            <converters:ProportionConverter x:Key="WidthProportionConverter"
                                            MultiplyBy="0.5"/>
        </DataTemplate.Resources>
        <Border HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                IsHitTestVisible="{Binding IsActive}">
            <Border.Background>
                <SolidColorBrush Color="Transparent" />
            </Border.Background>
            <Border Opacity="0"
                    BorderBrush="Black"
                    BorderThickness="1"
                    Background="White"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DependencyObject}, AncestorLevel=2}, Converter={StaticResource WidthProportionConverter}}"
                    MinWidth="500"
                    Name="innerBorder">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <ContentControl Grid.Row="0"
                               Grid.Column="0"
                               Content="{Binding Message}" />
                    <Button Grid.Row="0"
                            Grid.Column="1"
                            Margin="5"
                            Command="{Binding RetryCommand.Command}"
                            CommandParameter="{Binding RetryCommand.CommandParameter}"
                            VerticalAlignment="Center"
                            MinWidth="100"
                            Content="{Binding RetryCommand.CommandName}"
                            Visibility="{Binding RetryCommand.HasCommand, Converter={x:Static converters:BoolToVisibilityConverter.Instance}}" />
                    <Button Grid.Row="0"
                            Grid.Column="2"
                            Margin="2"
                            Template="{StaticResource CloseButtonTemplate}"
                            Command="{Binding DeactivateCommand}"
                            VerticalAlignment="Center"
                            Visibility="{Binding CanBeDeactivated, Converter={x:Static converters:BoolToVisibilityConverter.Instance}}" />
                    <Expander Grid.Row="1"
                              Grid.Column="0"
                              Grid.ColumnSpan="3"
                              Visibility="{Binding HasException, Converter={x:Static converters:BoolToVisibilityConverter.Instance}}"
                              FocusVisualStyle="{x:Null}">
                        <Expander.Header>
                            <DockPanel LastChildFill="False"
                                       HorizontalAlignment="Stretch"
                                       Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Expander}}}">
                                <TextBlock Text="{Binding IsExpanded, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Expander}}, Converter={StaticResource IsExpandedToTextConverter}}"
                                           DockPanel.Dock="Left"/>
                                <Button Content="Копировать в буфер обмена" 
                                        DockPanel.Dock="Right"
                                        Command="{Binding CopyToClipboardCommand}"
                                        Margin="0 0 30 0"
                                        Visibility="{Binding IsExpanded, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Expander}}, Converter={x:Static converters:BoolToVisibilityConverter.Instance}}"/>
                            </DockPanel>
                        </Expander.Header>
                        <TextBox HorizontalAlignment="Stretch"
                                 VerticalAlignment="Stretch"
                                 Height="200"
                                 IsReadOnly="True"
                                 Margin="5"
                                 VerticalScrollBarVisibility="Auto"
                                 Text="{Binding Exception, Mode=OneWay, Converter={x:Static converters:ToStringConverter.Instance}}" />
                    </Expander>
                </Grid>
            </Border>
        </Border>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsActive}"
                         Value="True">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard TargetName="innerBorder"
                                    TargetProperty="Opacity">
                            <DoubleAnimation To="1"
                                             Duration="{StaticResource AnimationDuration}" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard TargetName="innerBorder"
                                    TargetProperty="Opacity">
                            <DoubleAnimation To="0"
                                             Duration="{StaticResource AnimationDuration}" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
</ResourceDictionary>