<UserControl x:Class="Shared.PatientRecords.Views.DiagnosesView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"       
             xmlns:converters="clr-namespace:Core.Wpf.Converters;assembly=Core.Wpf"
             xmlns:viewModels="clr-namespace:Shared.PatientRecords.ViewModels"
             xmlns:fluent="urn:fluent-ribbon"
             xmlns:local="clr-namespace:Shared.PatientRecords.Misc"
             mc:Ignorable="d" 
             d:DesignHeight="200" d:DesignWidth="500"
             d:DataContext="{d:DesignInstance viewModels:DiagnosesCollectionViewModel}">
    <UserControl.Resources>
        <DataTemplate x:Key="DialogWindowTemplate">
            <Grid MinWidth="200" MinHeight="100">
                <TextBlock TextWrapping="Wrap" Grid.Row="0" Text="{Binding}"/>
            </Grid>
        </DataTemplate>

        <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="Transparent" />
        <Style TargetType="{x:Type TextBox}">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="TextWrapping" Value="Wrap"/>
            <Setter Property="AcceptsReturn" Value="True"/>
            <Setter Property="AcceptsTab" Value="True"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="Button" x:Key="ClarificationButton">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid Background="{TemplateBinding Background}">
                            <ContentPresenter x:Name="MyContentPresenter" 
                                          Content="{TemplateBinding Content}"
                                          HorizontalAlignment="Center" 
                                          VerticalAlignment="Center" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="{StaticResource DisabledBackgroundBrush}"/>
                    <Setter Property="Foreground" Value="{StaticResource DisabledBackgroundBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>   

    <DockPanel LastChildFill="True">
        <Label DockPanel.Dock="Top" Content="Диагноз" HorizontalAlignment="Left" FontWeight="Medium"/>
        
        <Grid DockPanel.Dock="Top">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"></RowDefinition>
            </Grid.RowDefinitions>
            <ToolBar>
                <fluent:DropDownButton 
                    Background="Transparent" BorderThickness="0" 
                    Icon="pack://application:,,,/Core;Component/Resources/Images/Add48x48.png"
                    SizeDefinition="Middle" Header="Добавить"
                    HasTriangle="True"
                    ItemsSource="{Binding DiagnosLevels}">
                    <fluent:DropDownButton.ItemContainerStyle>
                        <Style TargetType="{x:Type fluent:MenuItem}">
                            <Setter Property="Command" 
                                    Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type fluent:DropDownButton}}, 
                                                    Path=DataContext.AddDiagnosCommand}" />
                            <Setter Property="CommandParameter" Value="{Binding Id}"/>
                            <Setter Property="Header" Value="{Binding Name}"/>                            
                        </Style>
                    </fluent:DropDownButton.ItemContainerStyle>
                </fluent:DropDownButton>
                <Separator Margin="10,0"/>
                <fluent:Button 
                        Icon="pack://application:,,,/Core;Component/Resources/Images/Remove48x48.png"
                        SizeDefinition="Middle" Header="Удалить"
                        Command="{Binding RemoveDiagnosCommand}"
                        CommandParameter="{Binding ElementName=diagnoses, Path=SelectedItem}">
                </fluent:Button>
            </ToolBar>
        </Grid>
               
        <DataGrid x:Name="diagnoses" 
                  Visibility="{Binding HasAnyDiagnoses, Converter={x:Static converters:BoolToVisibilityConverter.Instance}}"
                  RowHeaderWidth="0"
                  GridLinesVisibility="None" AutoGenerateColumns="False" CanUserAddRows="False" Height="Auto"
                  ItemsSource="{Binding Diagnoses}" 
                  SelectedItem="{Binding SelectedDiagnos, Mode=TwoWay}">
            <DataGrid.Resources>
                <local:BindingProxy x:Key="proxy" Data="{Binding}" />
                <Style TargetType="{x:Type DataGridCell}">
                    <Style.Triggers>
                        <Trigger Property="DataGridCell.IsSelected" Value="True">
                            <Setter Property="Background" Value="#CCDAFF" />
                            <Setter Property="BorderBrush" Value="#CCDAFF" />
                            <Setter Property="Foreground" Value="#000000" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.Resources>
            <DataGrid.Columns>
                <DataGridTemplateColumn Header="Вид" Width="Auto"  IsReadOnly="True">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding LevelName}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="МКБ" Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBox Text="{Binding MKB, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                     IsEnabled="{Binding HasMKB}" MinWidth="40" MaxLength="5"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Button IsEnabled="{Binding AllowClarification}"                                                
                                    Command="{Binding ElementName=diagnoses, Path=DataContext.MakeClarificationCommand}"
                                    CommandParameter="{Binding}" Content="..." MinWidth="20"
                                    Style="{StaticResource ClarificationButton}">
                            </Button>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="Диагноз" Width="*">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBox Text="{Binding DiagnosText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                            HorizontalAlignment="Stretch"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{Binding Data.MainDiagnosHeader, Source={StaticResource proxy}}" Width="Auto" 
                        Visibility="{Binding Data.NeedSetMainDiagnos, Converter={x:Static converters:BoolToVisibilityConverter.Instance},
                        Source={StaticResource proxy}}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox IsChecked="{Binding IsMainDiagnos, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Center"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
    </DockPanel>
</UserControl>
