//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NotificationServiceEngine;

namespace Core.Notification.NotificationServiceEngine {
    
    
    //[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    //[System.ServiceModel.ServiceContractAttribute(ConfigurationName="NotificationServiceEngine.INotificationServiceEngine", CallbackContract=typeof(INotificationServiceEngineCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    //public interface INotificationServiceEngine {
        
    //    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationServiceEngine/Subscribe", ReplyAction="http://tempuri.org/INotificationServiceEngine/SubscribeResponse")]
    //    void Subscribe(System.Type subscriptionType);
        
    //    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotificationServiceEngine/Notify")]
    //    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Type))]
    //    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Reflection.MemberInfo))]
    //    void Notify(System.Type subscriptionType, object oldItem, object newItem);
        
    //    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotificationServiceEngine/Unsubscribe")]
    //    void Unsubscribe(System.Type subscriptionType);
    //}
    
    //[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    //public interface INotificationServiceEngineCallback {
        
    //    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotificationServiceEngine/OnNotified")]
    //    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Type))]
    //    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Reflection.MemberInfo))]
    //    void OnNotified(System.Type type, object oldItem, object newItem);
    //}
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotificationServiceEngineChannel : INotificationServiceEngine, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotificationServiceEngineClient : System.ServiceModel.DuplexClientBase<INotificationServiceEngine>, INotificationServiceEngine {
        
        public NotificationServiceEngineClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public NotificationServiceEngineClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public NotificationServiceEngineClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceEngineClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceEngineClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Subscribe(string subscriptionType) {
            base.Channel.Subscribe(subscriptionType);
        }
        
        public void Notify(string subscriptionType, byte[] oldItem, byte[] newItem) {
            base.Channel.Notify(subscriptionType, oldItem, newItem);
        }
        
        public void Unsubscribe(string subscriptionType) {
            base.Channel.Unsubscribe(subscriptionType);
        }
    }
}
